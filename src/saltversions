#!/usr/bin/env python3

"""
saltversions fetches version numbers from OBS repositories.
"""

__author__ = "Jochen Breuer"
__email__ = "jbreuer@suse.de"
__license__ = "MIT"

import sys
from os import environ
from concurrent.futures import ThreadPoolExecutor as PoolExecutor
from functools import partial

import requests
from pyrpm.spec import Spec

try:
    import osc.conf

    HAS_OSC = True
except ImportError:
    HAS_OSC = False

repos = (
    "systemsmanagement:saltstack:products",
    "systemsmanagement:saltstack:products:testing",
    "systemsmanagement:saltstack:products:3000",
    "systemsmanagement:saltstack:products:3000:testing",
    "systemsmanagement:saltstack:products:next",
    "systemsmanagement:saltstack:products:next:testing",
    "systemsmanagement:saltstack",
    "systemsmanagement:saltstack:testing",
    "openSUSE:Factory",
)


class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


def fetch(repo, credentials, api_url):
    """
    Fetching the spec file from a repository.
    """
    spec_url = "{}/source/{}/salt/salt.spec".format(api_url, repo)
    spec_file = requests.get(
        spec_url, auth=(credentials["username"], credentials["password"])
    )
    return repo, spec_file


def main():
    """
    Entry point of the script.
    """
    if (
        not all((environ.get("OSCUSER", None), environ.get("OSCPASS", None)))
        and not HAS_OSC
    ):
        print(
            "Please provide username and password as environment variables OSCUSER and OSCPASS.",
            file=sys.stderr,
        )
        sys.exit(1)

    credentials = {}
    api_url = "https://api.opensuse.org"
    if HAS_OSC:
        osc.conf.get_config()
        apiconf = osc.conf.config["api_host_options"][api_url]
        credentials["username"] = apiconf["user"]
        credentials["password"] = apiconf["pass"]
    else:
        credentials["username"] = environ["OSCUSER"]
        credentials["password"] = environ["OSCPASS"]

    with PoolExecutor(max_workers=4) as executor:
        fetch_with_creds_host = partial(fetch, credentials=credentials, api_url=api_url)
        for repo, spec_file in executor.map(fetch_with_creds_host, repos):
            if spec_file.status_code == 200:
                spec = Spec.from_string(spec_file.text)
                print("{}{}{}".format(bcolors.HEADER, repo, bcolors.ENDC))
                print("{}{}{}\n".format(bcolors.OKBLUE, spec.version, bcolors.ENDC))
            else:
                print("{}{}{}".format(bcolors.HEADER, repo, bcolors.ENDC))
                print(
                    "{}{}{}\n".format(
                        bcolors.FAIL, "Error while fetching repo.\n", bcolors.ENDC
                    )
                )


if __name__ == "__main__":
    main()
